apply plugin: 'com.android.library'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

apply from: "../config.gradle"
def rootConfig = rootProject.ext

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0-alpha05', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    testImplementation 'junit:junit:4.13.2'

    implementation 'com.google.android.material:material:1.5.0-alpha04'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.nineoldandroids:library:2.4.0'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                group = rootConfig.pkg.groupId
                artifactId = rootConfig.pkg.artifactId
                version = rootConfig.pkg.version

                // Adds javadocs and sources as separate jars.
                artifact androidJavadocsJar
                artifact(sourceJar)

                pom {
                    name = rootConfig.pkg.artifactId
                    description = rootConfig.pkg.desc
                    url = rootConfig.cvs.url
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'yhyzgn'
                            name = 'yhyzgn'
                        }
                    }
                    scm {
                        connection = 'scm:git@github.com/yhyzgn/Widgets.git'
                        developerConnection = 'scm:git@github.com/yhyzgn/Widgets.git'
                        url = 'https://github.com/yhyzgn/Widgets'
                    }
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}